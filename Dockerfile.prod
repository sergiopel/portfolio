FROM php:8.2-fpm

# Instalar dependências do sistema (apenas as necessárias para produção)
RUN apt-get update && apt-get install -y \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    supervisor

# Instalar Node.js (necessário apenas para compilar assets)
RUN curl -fsSL https://deb.nodesource.com/setup_20.x | bash - \
    && apt-get install -y nodejs

# Limpar cache para reduzir o tamanho da imagem
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

# Instalar extensões PHP necessárias
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd opcache

# Configurar PHP para produção
COPY docker/php/php.ini /usr/local/etc/php/conf.d/custom.ini

# Obter Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Definir diretório de trabalho
WORKDIR /var/www

# Copiar o código da aplicação
COPY . /var/www

# Instalar dependências e otimizar
RUN composer install --optimize-autoloader --no-dev

# Compilar assets
RUN npm ci && npm run build

# --- !!! ADICIONAR ESTA SEÇÃO !!! ---
# Ajustar permissões para www-data (usuário padrão do PHP-FPM e comum para Nginx)
# Garante que tanto o PHP quanto o Nginx (via volume) possam acessar
RUN chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache \
    && chown -R www-data:www-data /var/www/public # <-- Adicione a mudança de dono para public

# --- !!! FIM DA SEÇÃO ADICIONADA !!! ---

# Configurar permissões para o storage e cache
RUN chown -R www-data:www-data /var/www/storage /var/www/bootstrap/cache

# Otimizar Laravel para produção
RUN php artisan config:cache && \
    php artisan route:cache && \
    php artisan view:cache

# Copiar configuração do supervisor para gerenciar os processos
COPY docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf

# Expor porta do PHP-FPM
EXPOSE 9000

# Comando de inicialização
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]