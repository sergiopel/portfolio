# name: Deploy to Hostinger

# on:
#   push:
#     branches: [ master ] # ou master, dependendo da sua branch principal
#   workflow_dispatch: # Permite execução manual

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile.prod
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-to: type=inline

#       # Substituir DOCKER_USERNAME no docker-compose.prod.yml antes de copiar
#       - name: Prepare docker-compose file
#         run: |
#           sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" docker-compose.prod.yml
#           cat docker-compose.prod.yml

#       - name: Generate .env file
#         run: |
#           echo "APP_NAME=Portfolio" > .env.production
#           echo "APP_ENV=production" >> .env.production
#           echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
#           echo "APP_DEBUG=false" >> .env.production
#           echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
#           echo "DB_CONNECTION=mysql" >> .env.production
#           echo "DB_HOST=db" >> .env.production
#           echo "DB_PORT=3306" >> .env.production
#           echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
#           echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
#           echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
#           # Adicionar também o DOCKER_USERNAME no .env (redundância para garantir)
#           echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env.production
#           # Adicionar também o CONTROLE_GASTOS_URL no .env
#           echo "CONTROLE_GASTOS_URL=${{ secrets.CONTROLE_GASTOS_URL }}" >> .env.production
#           echo "CONTROLE_GASTOS_DB_DATABASE=${{ secrets.CONTROLE_GASTOS_DB_DATABASE }}" >> .env.production
#           echo "CONTROLE_GASTOS_DB_USERNAME=${{ secrets.CONTROLE_GASTOS_DB_USERNAME }}" >> .env.production
#           echo "CONTROLE_GASTOS_DB_PASSWORD=${{ secrets.CONTROLE_GASTOS_DB_PASSWORD }}" >> .env.production

#       - name: Copy files to Hostinger via SSH
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           source: "docker-compose.prod.yml,.env.production,docker/nginx/conf.d/,docker/scripts/backup.sh"
#           target: "/home/${{ secrets.HOSTINGER_USERNAME }}/portfolio"
          
#       - name: Deploy to Hostinger
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           script: |
#             cd /home/${{ secrets.HOSTINGER_USERNAME }}/portfolio
#             cp .env.production .env
            
#             # Exportar a variável também no ambiente SSH
#             export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
#             # Renomear o arquivo de configuração do Nginx
#             if [ -f "docker/nginx/conf.d/app.prod.conf" ]; then
#               rm -f docker/nginx/conf.d/default.conf  # Remove o arquivo de desenvolvimento
#               mv docker/nginx/conf.d/app.prod.conf docker/nginx/conf.d/default.conf
#               echo "Nginx configuration renamed from app.prod.conf to default.conf"
#             fi
            
#             # Parar e remover containers anteriores
#             docker compose -f docker-compose.prod.yml down
            
#             # Remover imagens antigas (opcional)
#             docker image prune -af
            
#             # Baixar a imagem atualizada
#             docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
            
#             # Iniciar os containers com a nova configuração
#             docker compose -f docker-compose.prod.yml up -d
            
#             # Gerar chave da aplicação
#             echo "Generating application key..."
#             docker exec portfolio-app php artisan key:generate --force
            
#             # Executar migrações e otimizações
#             echo "Running database migrations..."
#             docker exec portfolio-app php artisan migrate --force
            
#             docker exec portfolio-app php artisan storage:link || echo "Storage link command failed but continuing"
            
#             # Limpar caches da aplicação
#             echo "Clearing application caches..."
#             docker exec portfolio-app php artisan cache:clear
#             docker exec portfolio-app php artisan config:clear
#             docker exec portfolio-app php artisan view:clear
#             docker exec portfolio-app php artisan route:clear
            
#             # Montar os certificados SSL do sistema no container Nginx
#             if [ -f "/etc/letsencrypt/live/projetosdev.com/fullchain.pem" ]; then
#               echo "Copying SSL certificates to container..."
#               # Criar o diretório SSL no contêiner
#               docker exec portfolio-nginx mkdir -p /etc/nginx/ssl
              
#               # Copiar os arquivos reais (não os symlinks)
#               docker cp $(readlink -f /etc/letsencrypt/live/projetosdev.com/fullchain.pem) portfolio-nginx:/etc/nginx/ssl/fullchain.pem
#               docker cp $(readlink -f /etc/letsencrypt/live/projetosdev.com/privkey.pem) portfolio-nginx:/etc/nginx/ssl/privkey.pem
              
#               docker exec portfolio-nginx sh -c "chmod 644 /etc/nginx/ssl/fullchain.pem && chmod 600 /etc/nginx/ssl/privkey.pem"
#               docker exec portfolio-nginx nginx -s reload
#               echo "SSL certificates mounted and Nginx reloaded"
#             fi
            
#             # Verificar status dos containers
#             docker compose -f docker-compose.prod.yml ps
            
#             echo "Deployment completed successfully!"



# name: Deploy to Hostinger

# on:
#   push:
#     branches: [ master ] # ou master, dependendo da sua branch principal
#   workflow_dispatch: # Permite execução manual

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile.prod
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-to: type=inline

#       # Substituir DOCKER_USERNAME no docker-compose.prod.yml antes de copiar
#       - name: Prepare docker-compose file
#         run: |
#           sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" docker-compose.prod.yml
#           cat docker-compose.prod.yml

#       - name: Generate .env file
#         run: |
#           echo "APP_NAME=Portfolio" > .env.production
#           echo "APP_ENV=production" >> .env.production
#           echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
#           echo "APP_DEBUG=false" >> .env.production
#           echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
#           echo "DB_CONNECTION=mysql" >> .env.production
#           echo "DB_HOST=db" >> .env.production
#           echo "DB_PORT=3306" >> .env.production
#           echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
#           echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
#           echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
#           # Adicionar também o DOCKER_USERNAME no .env (redundância para garantir)
#           echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env.production

#       - name: Copy files to Hostinger via SSH
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           source: "docker-compose.prod.yml,.env.production,docker/nginx/conf.d/,docker/scripts/backup.sh"
#           target: "/home/${{ secrets.HOSTINGER_USERNAME }}/portfolio"
          
#       - name: Deploy to Hostinger
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           script: |
#             cd /home/${{ secrets.HOSTINGER_USERNAME }}/portfolio
#             cp .env.production .env
            
#             # Exportar a variável também no ambiente SSH
#             export DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
            
#             # Renomear o arquivo de configuração do Nginx
#             if [ -f "docker/nginx/conf.d/app.prod.conf" ]; then
#               rm -f docker/nginx/conf.d/default.conf  # Remove o arquivo de desenvolvimento
#               mv docker/nginx/conf.d/app.prod.conf docker/nginx/conf.d/default.conf
#               echo "Nginx configuration renamed from app.prod.conf to default.conf"
#             fi
            
#             # Parar e remover containers anteriores
#             docker compose -f docker-compose.prod.yml down
            
#             # Remover imagens antigas (opcional)
#             docker image prune -af
            
#             # Baixar a imagem atualizada
#             docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
            
#             # Iniciar os containers com a nova configuração
#             docker compose -f docker-compose.prod.yml up -d
            
#             # Executar migrações e otimizações
#             docker compose -f docker-compose.prod.yml exec -T app php artisan migrate --force || echo "Migration command failed but continuing"
#             docker compose -f docker-compose.prod.yml exec -T app php artisan storage:link || echo "Storage link command failed but continuing"
            
#             # Montar os certificados SSL do sistema no container Nginx

#             if [ -f "/etc/letsencrypt/live/projetosdev.com/fullchain.pem" ]; then
#               echo "Copying SSL certificates to container..."
#               # Criar o diretório SSL no contêiner
#               docker exec portfolio-nginx mkdir -p /etc/nginx/ssl
              
#               # Copiar os arquivos reais (não os symlinks)
#               docker cp $(readlink -f /etc/letsencrypt/live/projetosdev.com/fullchain.pem) portfolio-nginx:/etc/nginx/ssl/fullchain.pem
#               docker cp $(readlink -f /etc/letsencrypt/live/projetosdev.com/privkey.pem) portfolio-nginx:/etc/nginx/ssl/privkey.pem
              
#               docker exec portfolio-nginx sh -c "chmod 644 /etc/nginx/ssl/fullchain.pem && chmod 600 /etc/nginx/ssl/privkey.pem"
#               docker exec portfolio-nginx nginx -s reload
#               echo "SSL certificates mounted and Nginx reloaded"
#             fi            
#             # Verificar status dos containers
#             docker compose -f docker-compose.prod.yml ps
            
#             echo "Deployment completed successfully!"


# name: Deploy to Hostinger - Portfolio

# on:
#   push:
#     branches: [ master ]
#   workflow_dispatch:

# jobs:
#   build-and-deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v3

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v2

#       - name: Login to DockerHub
#         uses: docker/login-action@v2
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v4
#         with:
#           context: .
#           file: ./Dockerfile.prod
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
#           cache-to: type=inline

#       - name: Prepare docker-compose file
#         run: |
#           sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" docker-compose.prod.yml
#           cat docker-compose.prod.yml

#       - name: Generate .env file
#         run: |
#           echo "APP_NAME=Portfolio" > .env.production
#           echo "APP_ENV=production" >> .env.production
#           echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
#           echo "APP_DEBUG=false" >> .env.production
#           echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
#           echo "DB_CONNECTION=mysql" >> .env.production
#           # echo "DB_HOST=db" >> .env.production
#           echo "DB_HOST=${{ secrets.DB_HOST }}" >> .env.production
#           echo "DB_PORT=3306" >> .env.production
#           echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
#           echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
#           echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
#           echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env.production

#       - name: Copy files to Hostinger via SSH
#         uses: appleboy/scp-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           source: "docker-compose.prod.yml,.env.production,docker/nginx/conf.d/,docker/scripts/backup.sh"
#           target: "/home/${{ secrets.HOSTINGER_USERNAME }}/portfolio"
          
#       - name: Deploy to Hostinger
#         uses: appleboy/ssh-action@master
#         with:
#           host: ${{ secrets.HOSTINGER_HOST }}
#           username: ${{ secrets.HOSTINGER_USERNAME }}
#           password: ${{ secrets.HOSTINGER_PASSWORD }}
#           port: ${{ secrets.SSH_PORT }}
#           script: |
#             cd /home/${{ secrets.HOSTINGER_USERNAME }}/portfolio
#             cp .env.production .env
            
#             # Criar a rede se não existir
#             docker network inspect portfolio-network >/dev/null 2>&1 || docker network create portfolio-network
            
#             # Parar e remover containers anteriores
#             docker compose -f docker-compose.prod.yml down
            
#             # Remover imagens antigas (opcional)
#             docker image prune -af
            
#             # Baixar a imagem atualizada
#             docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
            
#             # Iniciar os containers com a nova configuração
#             docker compose -f docker-compose.prod.yml up -d
            
#             # Executar migrações e otimizações
#             docker exec portfolio-app php artisan migrate --force
#             docker exec portfolio-app php artisan storage:link || echo "Storage link command failed but continuing"
            
#             # Limpar caches da aplicação
#             docker exec portfolio-app php artisan cache:clear
#             docker exec portfolio-app php artisan config:clear
#             docker exec portfolio-app php artisan view:clear
#             docker exec portfolio-app php artisan route:clear
            
#             # Verificar status dos containers
#             docker compose -f docker-compose.prod.yml ps
            
#             echo "Portfolio deployment completed successfully!"


name: Deploy to Hostinger - Portfolio

on:
  push:
    branches: [ master ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest
          cache-to: type=inline

      - name: Prepare docker-compose file
        run: |
          sed -i "s/\${DOCKER_USERNAME}/${{ secrets.DOCKER_USERNAME }}/g" docker-compose.prod.yml
          cat docker-compose.prod.yml

      - name: Generate .env file
        run: |
          echo "APP_NAME=Portfolio" > .env.production
          echo "APP_ENV=production" >> .env.production
          echo "APP_KEY=${{ secrets.APP_KEY }}" >> .env.production
          echo "APP_DEBUG=false" >> .env.production
          echo "APP_URL=${{ secrets.APP_URL }}" >> .env.production
          #echo "ASSET_URL=${{ secrets.APP_URL }}" >> .env.production
          #echo "VITE_ASSET_URL=${{ secrets.APP_URL }}" >> .env.production
          echo "DB_CONNECTION=mysql" >> .env.production
          echo "DB_HOST=portfolio-db" >> .env.production
          echo "DB_PORT=3306" >> .env.production
          echo "DB_DATABASE=${{ secrets.DB_DATABASE }}" >> .env.production
          echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env.production
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> .env.production
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}" >> .env.production

      - name: Copy files to Hostinger via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          source: "docker-compose.prod.yml,.env.production,docker/nginx/conf.d/,docker/scripts/backup.sh"
          target: "/home/${{ secrets.HOSTINGER_USERNAME }}/portfolio"

      - name: Deploy to Hostinger
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTINGER_HOST }}
          username: ${{ secrets.HOSTINGER_USERNAME }}
          password: ${{ secrets.HOSTINGER_PASSWORD }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/portfolio
            cp .env.production .env

            # Renomear o arquivo de configuração do Nginx
            if [ -f "docker/nginx/conf.d/app.prod.conf" ]; then
              rm -f docker/nginx/conf.d/default.conf 2>/dev/null || true
              cp docker/nginx/conf.d/app.prod.conf docker/nginx/conf.d/default.conf
              echo "Nginx configuration copied from app.prod.conf to default.conf"
            fi

            # Criar a rede se não existir
            docker network inspect app-network >/dev/null 2>&1 || docker network create app-network

            # Parar e remover containers anteriores
            echo "Stopping existing portfolio containers..."
            docker compose -f docker-compose.prod.yml down

            # !!! === MODIFICAÇÃO AQUI === !!!
            # Remover o volume nomeado que contém o código/assets antigos.
            # Verifique o nome exato com 'docker volume ls' no servidor.
            # Geralmente é <nome_diretorio>_app-files (ex: portfolio_app-files)
            echo "Removing old app-files volume to ensure fresh code..."
            docker volume rm portfolio_portfolio-files -f || echo "Volume portfolio-files not found or already removed."
            # !!! === FIM DA MODIFICAÇÃO === !!!

            # Remover imagens antigas (opcional)
            echo "Pruning old Docker images..."
            docker image prune -af

            # Baixar a imagem atualizada
            echo "Pulling latest application image..."
            docker pull ${{ secrets.DOCKER_USERNAME }}/portfolio-app:latest

            # Iniciar os containers do portfolio
            echo "Starting new portfolio containers..."
            docker compose -f docker-compose.prod.yml up -d

            # Aguardar um pouco para garantir que os containers do portfolio estejam prontos
            echo "Waiting for portfolio containers to start up..."
            sleep 10

            # Reiniciar o proxy-reverso para usar a nova configuração (SE NECESSÁRIO)
            # Se o proxy reverso não mudar, talvez não precise reiniciar sempre.
            echo "Restarting reverse-proxy containers..."
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/proxy-reverso
            docker compose down
            docker compose up -d

            # Voltar ao diretório do portfolio para executar comandos adicionais
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/portfolio

            # Verificar se o container da aplicação está rodando antes de executar comandos nele
            if [ "$( docker ps -q -f name=portfolio-app )" ]; then
              echo "Running database migrations..."
              docker exec portfolio-app php artisan migrate --force

              echo "Linking storage..."
              docker exec portfolio-app php artisan storage:link || echo "Storage link command failed but continuing"

              echo "Clearing application caches..."
              docker exec portfolio-app php artisan optimize:clear
              # Usar optimize:clear é geralmente suficiente em produção após o deploy
              # docker exec portfolio-app php artisan cache:clear
              # docker exec portfolio-app php artisan config:clear
              # docker exec portfolio-app php artisan view:clear
              # docker exec portfolio-app php artisan route:clear
            else
              echo "ERROR: portfolio-app container is not running. Skipping artisan commands."
            fi

            # Verificar status dos containers
            echo "Portfolio containers status:"
            docker compose -f docker-compose.prod.yml ps

            echo "Proxy containers status:"
            cd /home/${{ secrets.HOSTINGER_USERNAME }}/proxy-reverso
            docker compose ps

            echo "Portfolio deployment completed!"